apiVersion: v1
data:
  ANCHORE_DB_HOST: anchore-engine-postgresql:5432
  ANCHORE_DB_NAME: anchore
  ANCHORE_DB_USER: anchoreengine
  ARGO_JOB: test
  config.yaml: "# Anchore Service Configuration File from ConfigMap\n\nservice_dir:
    /anchore_service_config\ntmp_dir: /scratch\nlog_level: INFO\ncleanup_images: \n\nallow_awsecr_iam_auto:
    false\nhost_id: ${ANCHORE_POD_NAME}\ninternal_ssl_verify: false\nauto_restart_services:
    false\n\nmetrics:\n  enabled: false\n\n# Uncomment if you have a local endpoint
    that can accept\n# notifications from the anchore-engine, as configured below\n#\n\n\n#
    Configure what feeds to sync. The 'admin' anchoreIO credentials are used if present,
    but not required.\n# The 'anonymous' user is used for the sync otherwise.\n# The
    sync will hit http://ancho.re/feeds, if any outbound firewall config needs to
    be set in your environment.\nfeeds:\n  sync_enabled: true\n  selective_sync:\n
    \   # If enabled only sync specific feeds instead of all that are found.\n    enabled:
    true\n    feeds:\n      # Vulnerabilities feed is the feed for distro cve sources
    (redhat, debian, ubuntu, oracle, alpine....)\n      vulnerabilities: true\n      #
    NVD Data is used for non-distro CVEs (jars, npm, etc) that are not packaged and
    released by distros as rpms, debs, etc\n      nvd: true\n      # Warning: enabling
    the package sync causes the service to require much\n      #   more memory to
    do process the significant data volume. We recommend at least 4GB available for
    the container\n      packages: false\n      # Enabling snyk syncs snyk vulnerability
    data from an on-premise anchore enterprise feeds service. Please contact\n      #
    anchore support for finding out more about this service\n      snyk: false\n  client_url:
    'https://ancho.re/v1/account/users'\n  token_url: 'https://ancho.re/oauth/token'\n
    \ anonymous_user_username: anon@ancho.re\n  anonymous_user_password: pbiU2RYZ2XrmYQ\n
    \ connection_timeout_seconds: 3\n  read_timeout_seconds: 60\n\ndefault_admin_password:
    ${ANCHORE_ADMIN_PASSWORD}\ndefault_admin_email: example@email.com\n\ncredentials:\n
    \ database:\n    db_connect: 'postgresql+pg8000://${ANCHORE_DB_USER}:${ANCHORE_DB_PASSWORD}@${ANCHORE_DB_HOST}/${ANCHORE_DB_NAME}'\n
    \   db_connect_args:\n      timeout: 120\n      ssl: false\n    db_pool_size:
    30\n    db_pool_max_overflow: 30\n\nservices:\n  apiext:\n    enabled: true\n
    \   require_auth: true\n    endpoint_hostname: anchore-engine-anchore-engine-api\n
    \   listen: '0.0.0.0'\n    port: 8228\n    ssl_enable: false\n    ssl_cert: /certs/tls.crt\n
    \   ssl_key: /certs/tls.key\n  analyzer:\n    enabled: true\n    require_auth:
    true\n    endpoint_hostname: anchore-engine-anchore-engine-analyzer\n    listen:
    '0.0.0.0'\n    port: 8084\n    cycle_timer_seconds: 1\n    cycle_timers:\n      image_analyzer:
    5\n      \n    max_threads: 1\n    analyzer_driver: 'nodocker'\n    ssl_cert:
    /certs/tls.crt\n    ssl_key: /certs/tls.key\n    ssl_enable: false\n  catalog:\n
    \   enabled: true\n    require_auth: true\n    endpoint_hostname: anchore-engine-anchore-engine-catalog\n
    \   listen: '0.0.0.0'\n    port: 8082\n    cycle_timer_seconds: '1'\n    cycle_timers:\n
    \     analyzer_queue: 1\n      image_watcher: 3600\n      notifications: 30\n
    \     policy_eval: 3600\n      repo_watcher: 60\n      service_watcher: 15\n      vulnerability_scan:
    14400\n      \n    ssl_enable: false\n    ssl_cert: /certs/tls.crt\n    ssl_key:
    /certs/tls.key\n    event_log:\n      notification:\n        enabled: true\n        level:\n
    \       - error\n      \n    archive:\n      compression:\n        enabled: true\n
    \       min_size_kbytes: 100\n      storage_driver:\n        config: {}\n        name:
    db\n      \n  simplequeue:\n    enabled: true\n    require_auth: true\n    endpoint_hostname:
    anchore-engine-anchore-engine-simplequeue\n    listen: '0.0.0.0'\n    port: 8083\n
    \   ssl_enable: false\n    ssl_cert: /certs/tls.crt\n    ssl_key: /certs/tls.key\n
    \ policy_engine:\n    enabled: true\n    require_auth: true\n    endpoint_hostname:
    anchore-engine-anchore-engine-policy\n    listen: '0.0.0.0'\n    port: 8087\n
    \   cycle_timer_seconds: 1\n    cycle_timers:\n      feed_sync: 14400\n      feed_sync_checker:
    3600\n      \n    ssl_cert: /certs/tls.crt\n    ssl_key: /certs/tls.key\n    ssl_enable:
    false\n"
kind: ConfigMap
metadata:
  labels:
    app: anchore-engine-anchore-engine
    chart: anchore-engine-0.10.0
    heritage: Tiller
    release: anchore-engine
  name: anchore-engine-anchore-engine
---
apiVersion: v1
data: null
kind: ConfigMap
metadata:
  labels:
    app: postgresql
    chart: postgresql-1.0.0
    heritage: Tiller
    release: anchore-engine
  name: anchore-engine-postgresql
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: anchore-engine-anchore-engine
    chart: anchore-engine-0.10.0
    heritage: Tiller
    release: anchore-engine
  name: anchore-engine-anchore-engine
stringData:
  ANCHORE_ADMIN_PASSWORD: foobar
  ANCHORE_DB_PASSWORD: anchore-postgres,123
type: Opaque
---
apiVersion: v1
data:
  postgres-password: YW5jaG9yZS1wb3N0Z3JlcywxMjM=
kind: Secret
metadata:
  labels:
    app: postgresql
    chart: postgresql-1.0.0
    heritage: Tiller
    release: anchore-engine
  name: anchore-engine-postgresql
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: anchore-engine-anchore-engine
    chart: anchore-engine-0.10.0
    component: api
    heritage: Tiller
    release: anchore-engine
  name: anchore-engine-anchore-engine-api
spec:
  ports:
  - name: anchore-external-api
    port: 8228
    protocol: TCP
    targetPort: 8228
  selector:
    app: anchore-engine-anchore-engine
    component: api
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: anchore-engine-anchore-engine
    chart: anchore-engine-0.10.0
    component: catalog
    heritage: Tiller
    release: anchore-engine
  name: anchore-engine-anchore-engine-catalog
spec:
  ports:
  - name: anchore-catalog-api
    port: 8082
    protocol: TCP
    targetPort: 8082
  selector:
    app: anchore-engine-anchore-engine
    component: catalog
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: anchore-engine-anchore-engine
    chart: anchore-engine-0.10.0
    component: policy
    heritage: Tiller
    release: anchore-engine
  name: anchore-engine-anchore-engine-policy
spec:
  ports:
  - name: anchore-policy-api
    port: 8087
    protocol: TCP
    targetPort: 8087
  selector:
    app: anchore-engine-anchore-engine
    component: policy
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: anchore-engine-anchore-engine
    chart: anchore-engine-0.10.0
    component: simplequeue
    heritage: Tiller
    release: anchore-engine
  name: anchore-engine-anchore-engine-simplequeue
spec:
  ports:
  - name: anchore-simplequeue-api
    port: 8083
    protocol: TCP
    targetPort: 8083
  selector:
    app: anchore-engine-anchore-engine
    component: simplequeue
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: postgresql
    chart: postgresql-1.0.0
    heritage: Tiller
    release: anchore-engine
  name: anchore-engine-postgresql
spec:
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: postgresql
    release: anchore-engine
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: anchore-engine-anchore-engine
    chart: anchore-engine-0.10.0
    component: analyzer
    heritage: Tiller
    release: anchore-engine
  name: anchore-engine-anchore-engine-analyzer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: anchore-engine-anchore-engine
      component: analyzer
  template:
    metadata:
      labels:
        app: anchore-engine-anchore-engine
        component: analyzer
    spec:
      containers:
      - args:
        - service
        - start
        - analyzer
        command:
        - /usr/local/bin/anchore-manager
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - secretRef:
            name: anchore-engine-anchore-engine
        - configMapRef:
            name: anchore-engine-anchore-engine
        image: docker.io/anchore/anchore-engine:v0.3.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /health
            port: analyzer-api
          initialDelaySeconds: 120
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        name: anchore-engine-analyzer
        ports:
        - containerPort: 8084
          name: analyzer-api
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: analyzer-api
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        resources: null
        volumeMounts:
        - mountPath: /config/config.yaml
          name: config-volume
          subPath: config.yaml
        - mountPath: /scratch
          name: analysis-scratch
      volumes:
      - configMap:
          name: anchore-engine-anchore-engine
        name: config-volume
      - emptyDir: {}
        name: analysis-scratch
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: anchore-engine-anchore-engine
    chart: anchore-engine-0.10.0
    component: api
    heritage: Tiller
    release: anchore-engine
  name: anchore-engine-anchore-engine-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: anchore-engine-anchore-engine
      component: api
  template:
    metadata:
      labels:
        app: anchore-engine-anchore-engine
        component: api
    spec:
      containers:
      - args:
        - service
        - start
        - apiext
        command:
        - /usr/local/bin/anchore-manager
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - secretRef:
            name: anchore-engine-anchore-engine
        - configMapRef:
            name: anchore-engine-anchore-engine
        image: docker.io/anchore/anchore-engine:v0.3.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /health
            port: external-api
          initialDelaySeconds: 120
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        name: anchore-engine-api
        ports:
        - containerPort: 8228
          name: external-api
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: external-api
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        resources: null
        volumeMounts:
        - mountPath: /config/config.yaml
          name: config-volume
          subPath: config.yaml
      volumes:
      - configMap:
          name: anchore-engine-anchore-engine
        name: config-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: anchore-engine-anchore-engine
    chart: anchore-engine-0.10.0
    component: catalog
    heritage: Tiller
    release: anchore-engine
  name: anchore-engine-anchore-engine-catalog
spec:
  replicas: 1
  selector:
    matchLabels:
      app: anchore-engine-anchore-engine
      component: catalog
  template:
    metadata:
      labels:
        app: anchore-engine-anchore-engine
        component: catalog
    spec:
      containers:
      - args:
        - service
        - start
        - catalog
        command:
        - /usr/local/bin/anchore-manager
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - secretRef:
            name: anchore-engine-anchore-engine
        - configMapRef:
            name: anchore-engine-anchore-engine
        image: docker.io/anchore/anchore-engine:v0.3.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /health
            port: catalog
          initialDelaySeconds: 120
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        name: anchore-engine-catalog
        ports:
        - containerPort: 8082
          name: catalog
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: catalog
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        resources: null
        volumeMounts:
        - mountPath: /config/config.yaml
          name: config-volume
          subPath: config.yaml
      volumes:
      - configMap:
          name: anchore-engine-anchore-engine
        name: config-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: anchore-engine-anchore-engine
    chart: anchore-engine-0.10.0
    component: policy
    heritage: Tiller
    release: anchore-engine
  name: anchore-engine-anchore-engine-policy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: anchore-engine-anchore-engine
      component: policy
  template:
    metadata:
      labels:
        app: anchore-engine-anchore-engine
        component: policy
    spec:
      containers:
      - args:
        - service
        - start
        - policy_engine
        command:
        - /usr/local/bin/anchore-manager
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - secretRef:
            name: anchore-engine-anchore-engine
        - configMapRef:
            name: anchore-engine-anchore-engine
        image: docker.io/anchore/anchore-engine:v0.3.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /health
            port: policy
          initialDelaySeconds: 120
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        name: anchore-engine-policy
        ports:
        - containerPort: 8087
          name: policy
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: policy
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        resources: null
        volumeMounts:
        - mountPath: /config/config.yaml
          name: config-volume
          subPath: config.yaml
      volumes:
      - configMap:
          name: anchore-engine-anchore-engine
        name: config-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: anchore-engine-anchore-engine
    chart: anchore-engine-0.10.0
    component: simplequeue
    heritage: Tiller
    release: anchore-engine
  name: anchore-engine-anchore-engine-simplequeue
spec:
  replicas: 1
  selector:
    matchLabels:
      app: anchore-engine-anchore-engine
      component: simplequeue
  template:
    metadata:
      labels:
        app: anchore-engine-anchore-engine
        component: simplequeue
    spec:
      containers:
      - args:
        - service
        - start
        - simplequeue
        command:
        - /usr/local/bin/anchore-manager
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - secretRef:
            name: anchore-engine-anchore-engine
        - configMapRef:
            name: anchore-engine-anchore-engine
        image: docker.io/anchore/anchore-engine:v0.3.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /health
            port: simplequeue
          initialDelaySeconds: 120
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        name: anchore-engine-simplequeue
        ports:
        - containerPort: 8083
          name: simplequeue
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: simplequeue
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        resources: null
        volumeMounts:
        - mountPath: /config/config.yaml
          name: config-volume
          subPath: config.yaml
      volumes:
      - configMap:
          name: anchore-engine-anchore-engine
        name: config-volume
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: postgresql
    chart: postgresql-1.0.0
    heritage: Tiller
    release: anchore-engine
  name: anchore-engine-postgresql
spec:
  selector:
    matchLabels:
      app: postgresql
      release: anchore-engine
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: postgresql
        release: anchore-engine
    spec:
      containers:
      - args: null
        env:
        - name: POSTGRES_USER
          value: anchoreengine
        - name: PGUSER
          value: anchoreengine
        - name: POSTGRES_DB
          value: anchore
        - name: POSTGRES_INITDB_ARGS
          value: ""
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-password
              name: anchore-engine-postgresql
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: postgres:9.6.2
        imagePullPolicy: ""
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          failureThreshold: 6
          initialDelaySeconds: 60
          timeoutSeconds: 5
        name: anchore-engine-postgresql
        ports:
        - containerPort: 5432
          name: postgresql
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
        volumeMounts:
        - mountPath: /var/lib/postgresql/data/pgdata
          name: data
          subPath: postgresql-db
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: anchore-engine-postgresql
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    helm.sh/resource-policy: delete
  labels:
    app: postgresql
    chart: postgresql-1.0.0
    heritage: Tiller
    release: anchore-engine
  name: anchore-engine-postgresql
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
