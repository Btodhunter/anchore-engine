#!/usr/bin/env bash

build() {
    docker build --target anchore-engine-builder -t "${GIT_REPO}:builder" -f ./Dockerfile .
    docker build --build-arg ANCHORE_COMMIT="${COMMIT_SHA}" --build-arg CLI_COMMIT="${CLI_COMMIT_SHA}" -t "${TEST_IMAGE_NAME}" -f ./Dockerfile .
}

push_dev_image() {
    if [[ "${CI}" == true ]]; then
        if [[ "${GIT_BRANCH}" == 'master' ]]; then
            echo "tagging & pushing image -- docker.io/anchore/anchore-engine:dev"
            docker tag "${TEST_IMAGE_NAME}" docker.io/anchore/anchore-engine:dev
            docker push docker.io/anchore/anchore-engine:dev
        elif [[ "${GIT_BRANCH}" =~ "${RELEASE_BRANCHES}" ]]; then
            echo "tagging & pushing image -- docker.io/anchore/anchore-engine:${GIT_BRANCH}-dev"
            docker tag "${TEST_IMAGE_NAME}" "docker.io/anchore/anchore-engine:${GIT_BRANCH}-dev"
            docker push "docker.io/anchore/anchore-engine:${GIT_BRANCH}-dev"
        fi
    fi
    echo "Pushing ${TEST_IMAGE_NAME} && ${IMAGE_REPOSITORY}:latest"
    docker tag "${TEST_IMAGE_NAME}" "${IMAGE_REPOSITORY}:latest"
    docker push "${IMAGE_REPOSITORY}:latest"
    docker push "${TEST_IMAGE_NAME}"
}

# push_rc_image() {

# }

# push_prod_image() {

# }

lint() {
    if [[ ! -x "${VENV_NAME}/bin/pylint" ]]; then
        pip install pylint
    fi
    pylint anchore_engine
    pylint anchore_manager
}

install_test_deps() {
    mkdir -p .tox
    local pip_packages=('tox' 'docker-compose' 'anchorecli')
    for p in "${pip_packages[@]}"; do
        if [[ ! "$(echo ${VENV_NAME}/bin/*)" =~ "$p" ]]; then
            pip install "$p"
        fi
    done
}

unit_tests() {
    tox test/unit | tee .tox/tox.log
}

integration_tests() {
    if [[ "${CI}" == true ]]; then
        tox test/integration | tee .tox/tox.log
    else
        ./scripts/tests/test_with_deps.sh test/integration/
    fi
}

functional_tests() {
    anchore-cli --u admin --p foobar --url http://localhost:8228/v1 system wait --feedsready ''
    anchore-cli --u admin --p foobar --url http://localhost:8228/v1 system status
    tox test/functional | tee .tox/tox.log
    python scripts/tests/aetest.py docker.io/alpine:latest
    python scripts/tests/aefailtest.py docker.io/alpine:latest
    docker_compose_down_ci
}

e2e_tests() {
    # Setup images for testing
    ENGINE_IMAGE="${DEV_IMAGE_REPO}:${COMMIT_SHA}"
    # Install stable/anchore-engine Helm chart
    helm install e2e-testing -f test/e2e/base-values.yaml --set anchoreEngineGlobal.image="${ENGINE_IMAGE}" stable/anchore-engine
    # Patch anchore-engine-api nodeport to the configured port thats mapped with kind to localhost:8228
    kubectl patch service e2e-testing-anchore-engine-api --type=json --patch '[{"op": "replace", "path": "/spec/ports/0/nodePort", "value":30028}]'
    # Run API endpoint health tests
    anchore-cli --u admin --p foobar system wait --timeout 300 --interval 10 --feedsready '' --servicesready 'catalog,apiext,policy_engine,simplequeue,analyzer'
    anchore-cli --u admin --p foobar system status
}

cleanup() {
    rm -rf "${VENV_NAME}/tmp"
}