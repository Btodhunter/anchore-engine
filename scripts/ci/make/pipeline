#!/usr/bin/env bash

function build() {
    docker build --target anchore-engine-builder -t ${GIT_REPO}:builder -f ./Dockerfile .
    docker build --build-arg ANCHORE_COMMIT=${COMMIT_SHA} --build-arg CLI_COMMIT=${CLI_COMMIT_SHA} -t ${TEST_IMAGE_NAME} -f ./Dockerfile .
}

function push_image() {
    if [[ ${CI} == true ]]; then
        if [[ ${GIT_BRANCH} == 'master' ]]; then
            echo "tagging & pushing image -- docker.io/anchore/anchore-engine:dev"
            docker tag "${TEST_IMAGE_NAME}" docker.io/anchore/anchore-engine:dev
            docker push docker.io/anchore/anchore-engine:dev
        elif [[ ${GIT_BRANCH} =~ ${RELEASE_BRANCHES} ]]; then
            echo "tagging & pushing image -- docker.io/anchore/anchore-engine:${GIT_BRANCH}-dev"
            docker tag "${TEST_IMAGE_NAME}" "docker.io/anchore/anchore-engine:${GIT_BRANCH}-dev"
            docker push "docker.io/anchore/anchore-engine:${GIT_BRANCH}-dev"
        fi
    fi
    echo "Pushing ${TEST_IMAGE_NAME} && ${IMAGE_REPOSITORY}:latest"
    docker tag "${TEST_IMAGE_NAME}" "${IMAGE_REPOSITORY}:latest"
    docker push "${IMAGE_REPOSITORY}:latest"
    docker push "${TEST_IMAGE_NAME}"
}

function lint() {
    hash pylint || pip install --upgrade pylint
    pylint anchore_engine
    pylint anchore_manager
}

function install_test_deps() {
    mkdir -p .tox
    hash tox || pip install tox
    hash docker-compose || pip install docker-compose
    hash anchore-cli || pip install anchorecli
}

function unit_tests() {
    tox test/unit | tee .tox/tox.log
}

function integration_tests() {
    if [[ ${CI} == true ]]; then
        tox test/integration | tee .tox/tox.log
    else
        ./scripts/tests/test_with_deps.sh test/integration/
    fi
}

function functional_tests() {
    tox test/functional | tee .tox/tox.log
}

function compose_tests() {
    anchore-cli --u admin --p foobar --url http://localhost:8228/v1 system wait --feedsready ''
    docker-compose logs engine-api
    anchore-cli --u admin --p foobar --url http://localhost:8228/v1 system status
    python scripts/tests/aetest.py docker.io/alpine:latest
    python scripts/tests/aefailtest.py docker.io/alpine:latest
}

function e2e_tests() {
    # Setup images for testing
    ENGINE_IMAGE="${DEV_IMAGE_REPO}:${CIRCLE_SHA1}"
    # Install stable/anchore-engine Helm chart
    helm install e2e-testing -f test/e2e/base-values.yaml --set anchoreEngineGlobal.image="${ENGINE_IMAGE}" stable/anchore-engine
    # Get docker network IP & API/UI NodePort binding
    CONTROL_PLANE_IP=$(docker inspect e2e-testing-control-plane | jq -r '.[].NetworkSettings.Networks.bridge.IPAddress')
    API_PORT=$(kubectl get svc e2e-testing-anchore-engine-api -o=json | jq '.spec.ports[] | select(.port==8228) | .nodePort')
    # Run API endpoint health tests
    anchore-cli --url "http://${CONTROL_PLANE_IP}:${API_PORT}/v1" --u admin --p foobar system wait --timeout 300 --interval 10 --feedsready '' --servicesready 'catalog,apiext,policy_engine,simplequeue,analyzer'
    anchore-cli --url "http://${CONTROL_PLANE_IP}:${API_PORT}/v1" --u admin --p foobar system status
}