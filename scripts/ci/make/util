#!/usr/bin/env bash

#########################################################
###   COMMON UTILITY FUNCTIONS - ALPHABETICAL ORDER   ###
#########################################################

cleanup() {
    rm -rf "${VENV}/tmp"
}

clean_container() {
    docker rmi "${TEST_IMAGE_NAME}"
}

clean_python_env() {
    rm -rf "${VENV}" \
        *.egg-info \
        dist \
        build
    find . -name '*.pyc' -exec rm -f {} \;
}

clean_tests() {
    rm -rf .tox
    rm -f tox.log
    rm -rf .pytest_cache
}

docker_compose_down() {
    docker-compose -f scripts/ci/docker-compose-ci.yaml down
}

docker_compose_up() {
    docker-compose -f scripts/ci/docker-compose-ci.yaml up -d
}

install() {
    pip install .
}

install_dev() {
    pip install --editable .
}

install_cluster_deps() {
    local arch=$(uname | tr A-Z a-z)

    if [[ ! -x "${VENV}/bin/kind" ]]; then
        color_print WARN "installing kind..."
        curl -qsSLo "${VENV}/bin/kind" "https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-${arch}-amd64"
        chmod +x "${VENV}/bin/kind"
    fi
    if [[ ! -x "${VENV}/bin/helm" ]]; then
        color_print WARN "installing helm..."
        curl -sSL "https://get.helm.sh/helm-${HELM_VERSION}-${arch}-amd64.tar.gz" | tar xzf - -C "${VENV}/bin" --strip-components=1 "${arch}-amd64/helm"
        chmod +x "${VENV}/bin/helm"
    fi
    if [[ ! -x "${VENV}/bin/kubectl" ]]; then
        color_print WARN "installing kubectl..."
        curl -sSLo "${VENV}/bin/kubectl" "https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/${arch}/amd64/kubectl"
        chmod +x "${VENV}/bin/kubectl"
    fi
}

install_testing_deps() {
    mkdir -p .tox
    for p in "$@"; do
        if [[ ! "$(echo ${VENV}/bin/*)" =~ "$p" ]]; then
            pip install -q "$p"
        fi
    done
}

kind_cluster_down() {
    install_cluster_deps
    kind delete cluster --name e2e-testing
}

kind_cluster_up() {
    install_cluster_deps
    kind create cluster --name e2e-testing --config test/e2e/kind-config.yaml --image "kindest/node:${KIND_NODE_IMAGE_TAG}" --wait 60s
    if [[ "$CI" == true ]]; then
        # create k8s secret using $DOCKER_USER & $DOCKER_PASS and set as default imagePullCreds
        kubectl create secret docker-registry anchore-enterprise-pullcreds --docker-server=docker.io --docker-username="${DOCKER_USER}" --docker-password="${DOCKER_PASS}" --docker-email=anchoreci@anchore.com
        kubectl patch serviceaccount default --type=merge --patch '{"imagePullSecrets":[{"name": "anchore-enterprise-pullcreds"}]}'
    fi
    helm repo add stable https://kubernetes-charts.storage.googleapis.com
}

color_print() {
    local color_code=$1
    local message=$2
    printf "\n${!color_code}%s${NORMAL}\n\n" "${message}"
}

setup_colors() {
    OK="\033[0;32m"
    WARN="\033[0;33m"
    INFO="\033[0;36m"
    ERROR="\033[0;31m"
    NORMAL="\033[0m"
}

setup_pyenv() {
    local python_binary_name="${PYTHON##*/}"

    if [[ -z "${PYENV_ROOT}" ]]; then
        export PYENV_ROOT="${HOME}/.pyenv"
    fi
    # install pyenv if an existing version doesnt already exist
    if [[ ! -d "${PYENV_ROOT}" ]]; then
        curl https://pyenv.run | "${SHELL}"
        echo 'export PATH="${HOME}/.pyenv/bin:${PATH}"' >> "${HOME}/.bashrc"
        echo 'eval "$(pyenv init -)"' >> "${HOME}/.bashrc"
        echo 'eval "$(pyenv virtualenv-init -)"' >> "${HOME}/.bashrc"
        chmod +x "${HOME}/.bashrc"
        color_print WARN "added pyenv config to ${HOME}/.bashrc"
        if [[ -f "${HOME}/.zshrc" ]]; then
            echo 'if [[ -f ~/.bashrc ]]; then source ~/.bashrc; fi' >> "${HOME}/.zshrc"
        elif [[ -f "${HOME}/.bash_profile" ]]; then
            echo 'if [[ -f ~/.bashrc ]]; then source ~/.bashrc; fi' >> "${HOME}/.bash_profile"
        fi
        color_print WARN "to enable pyenv in your current shell run: exec ${SHELL}"
    fi
    # install python if it doesnt already exist
    if [[ ! -f "${HOME}"/.pyenv/versions/"${PYTHON_VERSION}"/bin/"${python_binary_name}" ]]; then
        "${PYENV_ROOT}"/bin/pyenv install "${PYTHON_VERSION}"
    fi
    # set local pyenv version
    "${PYENV_ROOT}"/bin/pyenv local "${PYTHON_VERSION}"
}

setup_venv() {
    local python_binary_name="${PYTHON##*/}"

    if [[ ${CI} == true ]]; then
        hash pip || apt install python-pip
        hash virtualenv || pip install -q virtualenv
    else
        hash pip || (color_print ERROR "ensure python-pip is installed before attempting to setup virtualenv" && exit 1)
        hash virtualenv || (color_print ERROR "ensure virtualenv is installed before attempting to setup a virtual environment" && exit 1)
    fi
    # create virtualenv using specified python binary if it doesnt alredy exist
    if [[ ! -x "${PYTHON}" ]]; then
        virtualenv -p "${PYTHON##*/}" "${VENV}"
    fi
    color_print WARN "to enable virtual environment run: `source ${VENV_ACTIVATE}`"

}

trap_command() {
    local ret="$?"

    set +eo pipefail
    if [[ ! "${SKIP_CLEANUP}" == true ]]; then
        cleanup
    fi
    exit "${ret}"
}