#!/usr/bin/env bash

######################################################
###   PROJECT SPECIFIC FUNCTIONS - RUNTIME ORDER   ###
######################################################

build() {
    docker build --target anchore-engine-builder -t "${GIT_REPO}:builder" -f ./Dockerfile .
    docker build --build-arg ANCHORE_COMMIT="${COMMIT_SHA}" --build-arg CLI_COMMIT="${CLI_COMMIT_SHA}" -t "${TEST_IMAGE_NAME}" -f ./Dockerfile .
}

push_dev_image() {
    echo "Tagging and pushing ${DEV_IMAGE_REPO}:${COMMIT_SHA}"
    docker tag "${TEST_IMAGE_NAME}" "${DEV_IMAGE_REPO}:${COMMIT_SHA}"
    docker push "${DEV_IMAGE_REPO}:${COMMIT_SHA}"
    if [[ ${GIT_BRANCH} == 'master' ]]; then
        echo "tagging & pushing image -- ${DEV_IMAGE_REPO}:latest"
        docker tag "${DEV_IMAGE_REPO}:${COMMIT_SHA}" "${DEV_IMAGE_REPO}:latest"
        docker push "${DEV_IMAGE_REPO}:latest"
    elif [[ ${GIT_BRANCH} =~ ${RELEASE_BRANCHES} ]]; then
        echo "tagging & pushing image -- ${DEV_IMAGE_REPO}:${GIT_BRANCH}"
        docker tag "${DEV_IMAGE_REPO}:${COMMIT_SHA}" "${DEV_IMAGE_REPO}:${GIT_BRANCH}"
        docker push "${DEV_IMAGE_REPO}:${GIT_BRANCH}"
    fi
}

push_rc_image() {
    if [[ "${CI}" == true ]]; then
        echo "Tagging and pushing image -- ${DEV_IMAGE_REPO}:${GIT_TAG}"
        docker pull "${DEV_IMAGE_REPO}:${COMMIT_SHA}"
        docker tag "${DEV_IMAGE_REPO}:${COMMIT_SHA}" "${DEV_IMAGE_REPO}:${GIT_TAG}"
        docker push "${DEV_IMAGE_REPO}:${GIT_TAG}"
    else
        echo "CI=true must be set to push image -- ${DEV_IMAGE_REPO}:${GIT_TAG}"
    fi
}

push_prod_image() {
    if [[ "${CI}" == true ]]; then
        echo "Tagging and pushing image -- ${PROD_IMAGE_REPO}:${GIT_TAG}"
        docker pull "${DEV_IMAGE_REPO}:${COMMIT_SHA}"
        docker tag "${DEV_IMAGE_REPO}:${COMMIT_SHA}" "${PROD_IMAGE_REPO}:${GIT_TAG}"
        docker push "${PROD_IMAGE_REPO}:${GIT_TAG}"
        if [[ ${GIT_BRANCH} = ${LATEST_RELEASE_BRANCH} ]]; then
            echo "Tagging and pushing image -- ${PROD_IMAGE_REPO}:latest"
            docker tag "${PROD_IMAGE_REPO}:${GIT_TAG}" "${PROD_IMAGE_REPO}:latest"
            docker push "${PROD_IMAGE_REPO}:latest"
        fi
    else
        echo "CI=true must be set to push image -- ${PROD_IMAGE_REPO}:${GIT_TAG}"
    fi
}

lint() {
    if [[ ! -x "${VENV_NAME}/bin/pylint" ]]; then
        pip install pylint
    fi
    pylint anchore_engine
    pylint anchore_manager
}

unit_tests() {
    tox test/unit | tee .tox/tox.log
}

integration_tests() {
    if [[ "${CI}" == true ]]; then
        tox test/integration | tee .tox/tox.log
    else
        ./scripts/tests/test_with_deps.sh test/integration/
    fi
}

functional_tests() {
    anchore-cli --u admin --p foobar --url http://localhost:8228/v1 system wait --feedsready ''
    anchore-cli --u admin --p foobar --url http://localhost:8228/v1 system status
    tox test/functional | tee .tox/tox.log
    python scripts/tests/aetest.py docker.io/alpine:latest
    python scripts/tests/aefailtest.py docker.io/alpine:latest
}

e2e_tests() {
    # Setup images for testing
    ENGINE_IMAGE="${DEV_IMAGE_REPO}:${COMMIT_SHA}"
    # Install stable/anchore-engine Helm chart
    printf "%s\nInstalling stable/anchore-engine Helm chart...\n"
    helm repo add stable https://kubernetes-charts.storage.googleapis.com
    helm install e2e-testing -f test/e2e/base-values.yaml --set anchoreEngineGlobal.image="${ENGINE_IMAGE}" stable/anchore-engine | head -n6
    # Patch anchore-engine-api nodeport to the configured port thats mapped with kind to localhost:8228
    kubectl patch service e2e-testing-anchore-engine-api --type=json --patch '[{"op": "replace", "path": "/spec/ports/0/nodePort", "value":30028}]'
    # Run API endpoint health tests
    anchore-cli --u admin --p foobar system wait --timeout 300 --interval 10 --feedsready '' --servicesready 'catalog,apiext,policy_engine,simplequeue,analyzer'
    anchore-cli --u admin --p foobar system status
}